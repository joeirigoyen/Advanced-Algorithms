#include<iostream>
#include <fstream>
#include<string>
#include <vector>
#include <chrono>
#include "kmpAlgorithm.cpp"

using namespace std;
using namespace chrono;

void execute_kmp(string &filename) {
	// Start measuring total execution time
	auto total_start_t = steady_clock::now();
	// Initialize files
    ifstream mcodefile1(filename); // Prefix file
	ifstream file("txt_files/transmission.txt"); // File to be read
	// Initialize strings where info will be collected
	string transmission;
	string mcode1;
	getline(mcodefile1, mcode1);
	getline(file, transmission);
	// Initialize vector to store the information found
    int trans_size = transmission.size();
    int pref_size = mcode1.size();
	vector<int> locationArray = vector<int>(trans_size, 0); 
	// Look for prefix in string generated by transmission.txt file and measure lookup time
	size_t index;
	auto kmp_start_t = steady_clock::now();
	kmpPattSearch(transmission, mcode1, locationArray, index);
	auto kmp_end_t = steady_clock::now();
	auto kmp_diff_t = kmp_end_t - kmp_start_t;
	// Finish measuring total execution time:
	auto total_diff_t = kmp_end_t - total_start_t;
	// Show matches and runtime in terminal
	cout << endl;
	if(index > 0) {
        cout << index << " matches found at indices: " << endl;
		for(auto i = 0; i < index; i++){
			cout << i + 1 << ")" << locationArray[i] << endl;
		}
		cout << endl;
		cout << "KMP search time: " << chrono::duration<double, milli>(kmp_diff_t).count() << "ms" << endl;
		cout << "Total execution time: " << chrono::duration<double, milli>(total_diff_t).count() << "ms" << endl;
	} else {
		cout << "No matches." << endl;
	}
}

int main(int argc, char* argv[]) {
	// Look for files set as arguments in console execution
    for (size_t i = 1; i < argc; i++) {
		string filename = argv[i];
        execute_kmp(filename);
    }
}
